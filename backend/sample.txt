import cv2
import numpy as np
import utile

#image selection and  setups
path = "1.png"
widthImg = 700
heightImg = 700
questions = 10
choice = 4
ans = [1, 2, 4, 4, 4, 4, 1, 1, 1, 1]
webcamFeed = True
cameraNo = 0

cap = cv2.VideoCapture(cameraNo)
cap.set(10,150)


while True:
    if webcamFeed: success, img = cap.read()
    else: img = cv2.imread(path)

    #preprocessing the img
    img = cv2.resize(img,(widthImg,heightImg))
    imgContours = img.copy()
    imgFinal = img.copy()
    imgBiggestContours = img.copy()
    imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray,(5,5),1)
    imgCanny = cv2.Canny(imgBlur,10,50)

    try:
        #all countours find()
        contours, hierarchy = cv2.findContours(imgCanny,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        cv2.drawContours(imgContours, contours, -1,(0,255,0),10)
        #rectcountour find()
        rectCon= utile.rectCountour(contours)
        biggestContour = utile.getCornerPoints(rectCon[0])
        # print(biggestContour.shape)
        gradePoints = utile.getCornerPoints(rectCon[2]) #change here to match the box


        if biggestContour.size != 0 and gradePoints.size != 0:
            cv2.drawContours(imgBiggestContours,biggestContour,-1,(0,255,0),20)
            cv2.drawContours(imgBiggestContours,gradePoints,-1,(255,0,0),20)

            biggestContour =  utile.reorder(biggestContour)
            gradePoints       =  utile.reorder(gradePoints)

            pt1 = np.float32(biggestContour)
            pt2 = np.float32([[0,0], [widthImg,0], [0,heightImg],[widthImg,heightImg]])
            matrix = cv2.getPerspectiveTransform(pt1,pt2)
            imgWarpColored = cv2.warpPerspective(img,matrix,(widthImg,heightImg))
            
            ptG1 = np.float32(gradePoints)
            ptG2 = np.float32([[0,0], [325,0], [0,150],[325,150]])
            matrixg = cv2.getPerspectiveTransform(ptG1,ptG2)
            imgGradeDisplay = cv2.warpPerspective(img,matrixg,(325,150))
            # cv2.imshow("GRADE", imgGradeDisplay)

            imgWarpGray = cv2.cvtColor(imgWarpColored,cv2.COLOR_BGR2GRAY)
            imgThresh = cv2.threshold(imgWarpGray,170,255,cv2.THRESH_BINARY_INV)[1]
            

            boxes = utile.splitBoxes(imgThresh)
            # cv2.imshow("test",boxes[2])
            # print(cv2.countNonZero(boxes[1]),cv2.countNonZero(boxes[2]))

            # pixelvalues of each  dark points
            yPixelVal = np.zeros((questions,choice))
            countC = 0
            countR = 0

            for image in boxes:
                totalPixels = cv2.countNonZero(image)
                yPixelVal[countR][countC] = totalPixels
                countC +=1
                if(countC == choice):countR +=1; countC = 0
            print(yPixelVal)
        #finding index value of the marking
            yIndex = []
            for x in range (0,questions):
                arr = yPixelVal[x]
                # print("arr",arr)
                yIndexVal = np.where(arr==np.amax(arr))
                # print(yIndexVal[0]) 
                yIndex.append(yIndexVal[0][0])
            # print(yIndex)


            #grading 

            grading = []
            for x in range (0, questions):
                if ans[x] == yIndex[x]:
                    grading.append(1)
                else: grading.append(0)
            # print(grading)

            score = (sum(grading)/questions) * 100 
            print(score)

            #display answers
            imgResult = imgWarpColored.copy()
            imgResult = utile.showAnswers(imgResult,yIndex,grading,ans,questions,choice)

            imgRawDrawing = np.zeros_like(imgWarpColored)
            imgRawDrawing = utile.showAnswers(imgRawDrawing,yIndex,grading,ans,questions,choice)
            
            inMatrix = cv2.getPerspectiveTransform(pt2,pt1)
            imgInvWarp = cv2.warpPerspective(imgRawDrawing,inMatrix,(widthImg,heightImg))
            
            imgRawGrade = np.zeros_like(imgGradeDisplay)
            cv2.putText(imgRawGrade, str(int(score))+"%",(60,80),cv2.FONT_HERSHEY_COMPLEX,1,(215,255,0),1)
            cv2.imshow("Grade",imgRawGrade)
            invMatrixg = cv2.getPerspectiveTransform(ptG2,ptG1)
            imgInvGradeDis = cv2.warpPerspective(img,invMatrixg,(widthImg,heightImg))

            imgFinal = cv2.addWeighted(imgFinal,1,imgInvWarp,1,0)
            imgFinal = cv2.addWeighted(imgFinal,1,imgInvGradeDis,1,0)
        
        
        imgBlank = np.zeros_like(img)
        imageArray = ([img, imgGray,imgBlur,imgCanny],
                    [imgContours, imgBiggestContours, imgWarpColored, imgThresh],
                    [imgResult, imgRawDrawing, imgInvWarp, imgFinal])


    except:
        imgBlank = np.zeros_like(img)
        imageArray = ([img, imgGray,imgBlur,imgCanny],
                    [imgBlank, imgBlank, imgBlank, imgBlank],
                    [imgBlank, imgBlank, imgBlank, imgBlank])
    labels = [["Original","Gray","Blur","Canny"],
            ["Contours","Biggest Con", "Warp", "Threshold"],
            ["Result", "Raw Drawing", "Inv Warp", "Final"]]
    imgstacked = utile.stackImages(imageArray, 0.3,labels)
    

    cv2.imshow("final Result",imgFinal)
    cv2.imshow("stacked images", imgstacked)
    if cv2.waitKey(1) & 0xff == ord('s'):
        cv2.imwrite("finalResult.jpg",imgFinal)
        cv2.waitKey(300)



utlits



import cv2
import numpy as np

# Utility functions
def stackImages(imgArray, scale, labels=[]):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range(rows):
            for y in range(cols):
                imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                if len(imgArray[x][y].shape) == 2:
                    imgArray[x][y] = cv2.cvtColor(imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank] * rows
        for x in range(rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(rows):
            imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            if len(imgArray[x].shape) == 2:
                imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        ver = np.hstack(imgArray)
    
    if len(labels) != 0:
        eachImgWidth = int(ver.shape[1] / cols)
        eachImgHeight = int(ver.shape[0] / rows)
        for d in range(rows):
            for c in range(cols):
                cv2.rectangle(ver, (c * eachImgWidth, eachImgHeight * d), (c * eachImgWidth + len(labels[d][c]) * 13 + 27, 30 + eachImgHeight * d), (255, 255, 255), cv2.FILLED)
                cv2.putText(ver, labels[d][c], (eachImgWidth * c + 10, eachImgHeight * d + 20), cv2.FONT_HERSHEY_COMPLEX, 0.7, (255, 0, 255), 2)
    return ver

def rectCountour(contours):
    rectCon = []
    for i in contours:
        area = cv2.contourArea(i)
        if area > 50:
            peri = cv2.arcLength(i, True)
            approx = cv2.approxPolyDP(i, 0.02 * peri, True)
            if len(approx) == 4:
                rectCon.append(i)
    rectCon = sorted(rectCon, key=cv2.contourArea, reverse=True)
    return rectCon

def getCornerPoints(cont):
    peri = cv2.arcLength(cont, True)
    approx = cv2.approxPolyDP(cont, 0.02 * peri, True)
    return approx

def reorder(points):
    points = points.reshape((4, 2))
    pointsNew = np.zeros((4, 1, 2), np.int32)
    add = points.sum(1)
    pointsNew[0] = points[np.argmin(add)]
    pointsNew[3] = points[np.argmax(add)]
    diff = np.diff(points, axis=1)
    pointsNew[1] = points[np.argmin(diff)]
    pointsNew[2] = points[np.argmax(diff)]
    return pointsNew

def splitBoxes(img):
    rows = np.vsplit(img, 5)
    boxes = []
    for r in rows:
        cols = np.hsplit(r, 5)
        for box in cols:
            boxes.append(box)
    return boxes

def showAnswers(img, yIndex, grading, ans, questions, choice):
    secW = int(img.shape[1] / choice)
    secH = int(img.shape[0] / questions)
    for x in range(questions):
        yAns = yIndex[x]
        cX = (yAns * secW) + secW // 2
        cY = (x * secH) + secH // 2
        if grading[x] == 1:
            color = (0, 255, 0)
        else:
            color = (0, 0, 255)
            correctAns = ans[x]
            cv2.circle(img, ((correctAns * secW) + secW // 2, (x * secH) + secH // 2), 50, (0, 255, 0), cv2.FILLED)
        cv2.circle(img, (cX, cY), 30, color, cv2.FILLED)
    return img


    mongodb+srv://smartomr:smartomrdb1@cluster0.qj6tpvi.mongodb.net